apply plugin: 'com.android.library'
apply plugin: 'com.apollographql.android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // RxAndroid
    // https://github.com/ReactiveX/RxAndroid
    // https://github.com/ReactiveX/RxJava
    // https://github.com/ReactiveX/RxJavaJoins
    compile 'io.reactivex:rxandroid:1.2.1'

    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile 'io.reactivex:rxjava:1.1.6'

    compile "com.apollographql.apollo:apollo-rx-support:$apollo_version"
    compile "com.apollographql.apollo:apollo-runtime:$apollo_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.3"
    compile "com.android.support:support-annotations:25.3.1"

    testCompile 'junit:junit:4.12'
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//region bintray
apply plugin: 'com.novoda.bintray-release'

publish {
    userOrg = project.userName
    groupId = project.groupId
    repoName = project.repoName
    artifactId = 'retroapollo'
    publishVersion = project.publishVersion
    desc = project.desc//描述，不重要
    website = project.website
    bintrayUser = project.userName
    bintrayKey = project.apiKey
    dryRun = project.dryRun
}
//endregion

//work around for apollo-android
if (project.getGradle().startParameter.isOffline()) {
    afterEvaluate {
        tasks.installApolloCodegen.deleteAllActions()
    }
}